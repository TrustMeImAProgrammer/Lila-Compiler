
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6EF4A0D1E5BA0EC2729028D83BC13BA6'
    
_lr_action_items = {'REAL':([0,2,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,78,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,117,118,120,127,128,130,131,132,133,134,],[1,1,-9,-6,-10,-2,-8,1,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,1,-62,1,1,1,1,-12,-13,1,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,1,1,1,-30,-29,-18,-14,-28,-25,-26,-27,1,-17,1,1,1,1,1,-20,1,-19,]),'RETURN':([0,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,118,128,130,131,132,133,134,],[6,-9,-6,-10,-2,-8,6,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,6,-62,6,6,6,-12,-13,6,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,6,6,6,-30,-29,-18,-14,-28,-25,-26,-27,-17,6,6,6,-20,6,-19,]),'FLOATNUMBER':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,82,119,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'VOID':([120,127,],[124,124,]),'ISEQUALS':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,67,-39,67,-39,67,-61,-62,67,67,-49,-51,-56,-60,67,-52,-58,-53,-54,-57,-59,-50,-18,67,-17,67,]),'NUMBER':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,82,119,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CHAR':([0,2,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,78,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,117,118,120,127,128,130,131,132,133,134,],[22,22,-9,-6,-10,-2,-8,22,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,22,-62,22,22,22,22,-12,-13,22,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,22,22,22,-30,-29,-18,-14,-28,-25,-26,-27,22,-17,22,22,22,22,22,-20,22,-19,]),'WHILE':([0,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,118,128,130,131,132,133,134,],[4,-9,-6,-10,-2,-8,4,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,4,-62,4,4,4,-12,-13,4,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,4,4,4,-30,-29,-18,-14,-28,-25,-26,-27,-17,4,4,4,-20,4,-19,]),'COLON':([100,116,],[114,121,]),'CONST':([0,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,118,128,130,131,132,133,134,],[2,-9,-6,-10,-2,-8,2,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,2,-62,2,2,2,-12,-13,2,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,2,2,2,-30,-29,-18,-14,-28,-25,-26,-27,-17,2,2,2,-20,2,-19,]),'TRUE':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,82,119,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'MINUS':([4,5,6,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,80,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,119,123,],[35,35,35,-43,-46,-44,-40,-36,-47,35,-45,-37,-39,-38,-48,-42,35,-41,69,-39,69,-39,69,35,35,-61,-62,35,35,35,35,35,35,35,35,35,35,35,35,35,69,69,69,69,-56,-60,69,69,-58,69,69,-57,-59,69,-18,69,-17,35,69,]),'DIVIDE':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,66,-39,66,-39,66,-61,-62,66,66,66,66,-56,-60,66,66,66,66,66,66,-59,66,-18,66,-17,66,]),'LE':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,71,-39,71,-39,71,-61,-62,71,71,71,-51,-56,-60,71,-52,-58,-53,-54,-57,-59,71,-18,71,-17,71,]),'RPAREN':([29,30,31,32,33,34,36,37,39,40,41,43,47,60,62,78,80,85,86,87,88,89,90,91,92,93,94,95,96,101,103,106,107,108,115,118,122,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-61,-62,100,107,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,-31,116,118,-18,-34,-33,-17,-32,-35,]),'LT':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,68,-39,68,-39,68,-61,-62,68,68,68,-51,-56,-60,68,-52,-58,-53,-54,-57,-59,68,-18,68,-17,68,]),'PLUS':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,72,-39,72,-39,72,-61,-62,72,72,72,72,-56,-60,72,72,-58,72,72,-57,-59,72,-18,72,-17,72,]),'SLITERAL':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,82,119,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'COMMA':([29,30,31,32,33,34,36,37,39,40,41,43,47,60,62,85,86,87,88,89,90,91,92,93,94,95,96,101,103,106,107,108,115,118,122,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-61,-62,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,-31,117,119,-18,-34,-33,-17,-32,-35,]),'$end':([7,8,9,10,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,104,105,107,109,110,111,112,113,118,132,134,],[-9,-6,-10,0,-2,-8,-1,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,-62,-12,-13,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,-30,-29,-18,-14,-28,-25,-26,-27,-17,-20,-19,]),'FUNCTION':([0,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,118,128,130,131,132,133,134,],[14,-9,-6,-10,-2,-8,14,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,14,-62,14,14,14,-12,-13,14,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,14,14,14,-30,-29,-18,-14,-28,-25,-26,-27,-17,14,14,14,-20,14,-19,]),'GT':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,64,-39,64,-39,64,-61,-62,64,64,64,-51,-56,-60,64,-52,-58,-53,-54,-57,-59,64,-18,64,-17,64,]),'MODULO':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,65,-39,65,-39,65,-61,-62,65,65,65,65,-56,-60,65,65,65,65,65,65,-59,65,-18,65,-17,65,]),'STRING':([0,2,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,78,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,117,118,120,127,128,130,131,132,133,134,],[16,16,-9,-6,-10,-2,-8,16,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,16,-62,16,16,16,16,-12,-13,16,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,16,16,16,-30,-29,-18,-14,-28,-25,-26,-27,16,-17,16,16,16,16,16,-20,16,-19,]),'FOR':([0,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,118,128,130,131,132,133,134,],[17,-9,-6,-10,-2,-8,17,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,17,-62,17,17,17,-12,-13,17,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,17,17,17,-30,-29,-18,-14,-28,-25,-26,-27,-17,17,17,17,-20,17,-19,]),'PLUSPLUS':([19,],[54,]),'EQUALS':([19,26,28,29,58,],[-43,57,59,-43,82,]),'ELSE':([12,111,112,],[49,-25,-26,]),'GE':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,70,-39,70,-39,70,-61,-62,70,70,70,-51,-56,-60,70,-52,-58,-53,-54,-57,-59,70,-18,70,-17,70,]),'LPAREN':([29,52,56,],[-43,78,80,]),'IN':([53,],[79,]),'MINUSMINUS':([19,],[55,]),'TIMES':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,73,-39,73,-39,73,-61,-62,73,73,73,73,-56,-60,73,73,73,73,73,73,-59,73,-18,73,-17,73,]),'ID':([0,1,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,39,40,41,42,43,47,48,50,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,105,107,109,110,111,112,113,118,119,128,130,131,132,133,134,],[19,-65,29,29,29,29,-9,-6,-10,-2,-8,19,29,-11,-64,53,-4,-7,-5,-67,-63,-66,29,29,-43,-46,-44,-40,-36,-47,29,-45,-37,-38,-48,-42,29,-41,-39,-23,-24,-3,-15,-16,29,29,-61,19,-62,29,29,29,29,29,29,29,29,29,29,29,29,19,19,19,105,29,-12,-13,19,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,19,19,19,29,-30,-29,-18,-14,-28,-25,-26,-27,-17,29,19,19,19,-20,19,-19,]),'IF':([0,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,118,128,130,131,132,133,134,],[5,-9,-6,-10,-2,-8,5,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,5,-62,5,5,5,-12,-13,5,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,5,5,5,-30,-29,-18,-14,-28,-25,-26,-27,-17,5,5,5,-20,5,-19,]),'AND':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,63,-39,63,-39,63,-61,-62,63,63,-49,-51,-56,-60,63,-52,-58,-53,-54,-57,-59,63,-18,63,-17,63,]),'LBRACKET':([1,16,22,23,24,29,30,31,32,33,34,36,37,38,39,40,41,43,45,46,47,49,60,62,85,86,87,88,89,90,91,92,93,94,95,96,107,118,124,125,126,129,],[-65,-64,-67,-63,-66,-43,-46,-44,-40,-36,-47,-45,-37,61,-38,-48,-42,-41,75,76,-39,77,-61,-62,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,-18,-17,-22,-21,128,131,]),'FALSE':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,82,119,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'INT':([0,2,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,78,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,117,118,120,127,128,130,131,132,133,134,],[23,23,-9,-6,-10,-2,-8,23,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,23,-62,23,23,23,23,-12,-13,23,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,23,23,23,-30,-29,-18,-14,-28,-25,-26,-27,23,-17,23,23,23,23,23,-20,23,-19,]),'RETURNS':([114,121,],[120,127,]),'BOOLEAN':([0,2,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,61,62,75,76,77,78,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,117,118,120,127,128,130,131,132,133,134,],[24,24,-9,-6,-10,-2,-8,24,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,24,-62,24,24,24,24,-12,-13,24,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,24,24,24,-30,-29,-18,-14,-28,-25,-26,-27,24,-17,24,24,24,24,24,-20,24,-19,]),'CALL':([0,4,5,6,7,8,9,11,12,13,15,18,20,21,29,30,31,32,33,34,35,36,37,39,40,41,42,43,47,48,50,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,118,119,128,130,131,132,133,134,],[25,25,25,25,-9,-6,-10,-2,-8,25,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,25,-45,-37,-38,-48,-42,25,-41,-39,-23,-24,-3,-15,-16,25,25,-61,25,-62,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-12,-13,25,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,25,25,25,-30,-29,-18,-14,-28,-25,-26,-27,-17,25,25,25,25,-20,25,-19,]),'NOT':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,119,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'RBRACKET':([7,8,9,11,12,15,18,20,21,29,30,31,32,33,34,36,37,39,40,41,43,47,48,50,51,54,55,60,62,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,107,109,110,111,112,113,118,130,132,133,134,],[-9,-6,-10,-2,-8,-11,-4,-7,-5,-43,-46,-44,-40,-36,-47,-45,-37,-38,-48,-42,-41,-39,-23,-24,-3,-15,-16,-61,-62,-12,-13,110,-49,-51,-56,-60,-55,-52,-58,-53,-54,-57,-59,-50,111,112,113,-30,-29,-18,-14,-28,-25,-26,-27,-17,132,-20,134,-19,]),'OR':([29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,107,108,118,123,],[-43,-46,-44,-40,-36,-47,-45,-37,-39,-38,-48,-42,-41,74,-39,74,-39,74,-61,-62,74,74,-49,-51,-56,-60,74,-52,-58,-53,-54,-57,-59,-50,-18,74,-17,74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type_info':([0,2,13,61,75,76,77,78,84,97,98,99,117,120,127,128,130,131,133,],[3,27,3,3,3,3,3,102,3,3,3,3,102,125,125,3,3,3,3,]),'arguments_list':([80,],[106,]),'unary_op':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,119,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'simple_expression':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,119,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'func_declaration':([0,13,61,75,76,77,84,97,98,99,128,130,131,133,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'if_else_statement':([0,13,61,75,76,77,84,97,98,99,128,130,131,133,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'return_statement':([0,13,61,75,76,77,84,97,98,99,128,130,131,133,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'while_statement':([0,13,61,75,76,77,84,97,98,99,128,130,131,133,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'program':([0,],[10,]),'statement':([0,13,61,75,76,77,84,97,98,99,128,130,131,133,],[11,51,11,11,11,11,51,51,51,51,11,51,11,51,]),'parameter_declaration':([78,117,],[101,122,]),'if_statement':([0,13,61,75,76,77,84,97,98,99,128,130,131,133,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'translation_unit':([0,61,75,76,77,128,131,],[13,84,97,98,99,130,133,]),'for_statement':([0,13,61,75,76,77,84,97,98,99,128,130,131,133,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'assignment':([0,13,61,75,76,77,84,97,98,99,128,130,131,133,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'binary_op':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,119,],[38,45,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'atom':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,119,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'return_type':([120,127,],[126,129,]),'else_statement':([12,],[50,]),'func_call':([0,4,5,6,13,35,42,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,84,97,98,99,119,128,130,131,133,],[21,37,37,37,21,37,37,37,37,21,37,37,37,37,37,37,37,37,37,37,37,37,21,21,21,104,37,21,21,21,21,37,21,21,21,21,]),'value':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,82,119,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,109,41,]),'params_list':([78,],[103,]),'identifier':([0,3,4,5,6,13,14,25,27,35,42,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,84,97,98,99,102,119,128,130,131,133,],[26,28,43,43,43,26,52,56,58,43,43,43,43,26,43,43,43,43,43,43,43,43,43,43,43,43,26,26,26,43,26,26,26,26,115,43,26,26,26,26,]),'expression':([4,5,6,35,42,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,119,],[44,46,48,60,62,81,83,85,86,87,88,89,90,91,92,93,94,95,96,108,123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','parser.py',17),
  ('translation_unit -> statement','translation_unit',1,'p_translation_unit','parser.py',21),
  ('translation_unit -> translation_unit statement','translation_unit',2,'p_translation_unit','parser.py',22),
  ('statement -> assignment','statement',1,'p_statement','parser.py',36),
  ('statement -> func_call','statement',1,'p_statement','parser.py',37),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> func_declaration','statement',1,'p_statement','parser.py',39),
  ('statement -> if_statement','statement',1,'p_statement_block','parser.py',44),
  ('statement -> if_else_statement','statement',1,'p_statement_block','parser.py',45),
  ('statement -> while_statement','statement',1,'p_statement_block','parser.py',46),
  ('statement -> for_statement','statement',1,'p_statement_block','parser.py',47),
  ('assignment -> identifier EQUALS expression','assignment',3,'p_assignment','parser.py',57),
  ('assignment -> type_info identifier EQUALS expression','assignment',4,'p_decl_assignment','parser.py',62),
  ('assignment -> CONST type_info identifier EQUALS value','assignment',5,'p_decl_assignment','parser.py',63),
  ('assignment -> ID PLUSPLUS','assignment',2,'p_assignment_increment','parser.py',71),
  ('assignment -> ID MINUSMINUS','assignment',2,'p_assignment_decrement','parser.py',75),
  ('func_call -> CALL identifier LPAREN arguments_list RPAREN','func_call',5,'p_func_call','parser.py',83),
  ('func_call -> CALL identifier LPAREN RPAREN','func_call',4,'p_func_call','parser.py',84),
  ('func_declaration -> FUNCTION identifier LPAREN params_list RPAREN COLON RETURNS return_type LBRACKET translation_unit RBRACKET','func_declaration',11,'p_func_declaration','parser.py',94),
  ('func_declaration -> FUNCTION identifier LPAREN RPAREN COLON RETURNS return_type LBRACKET translation_unit RBRACKET','func_declaration',10,'p_func_declaration','parser.py',95),
  ('return_type -> type_info','return_type',1,'p_return_type','parser.py',104),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',105),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser.py',109),
  ('if_else_statement -> if_statement else_statement','if_else_statement',2,'p_if_else_statement','parser.py',119),
  ('if_statement -> IF binary_op LBRACKET translation_unit RBRACKET','if_statement',5,'p_if_statement','parser.py',123),
  ('if_statement -> IF expression LBRACKET translation_unit RBRACKET','if_statement',5,'p_if_statement','parser.py',124),
  ('else_statement -> ELSE LBRACKET translation_unit RBRACKET','else_statement',4,'p_else_statement','parser.py',128),
  ('while_statement -> WHILE binary_op LBRACKET translation_unit RBRACKET','while_statement',5,'p_while_statement','parser.py',132),
  ('for_statement -> FOR ID IN ID','for_statement',4,'p_for_statement','parser.py',136),
  ('for_statement -> FOR ID IN func_call','for_statement',4,'p_for_statement','parser.py',137),
  ('params_list -> parameter_declaration','params_list',1,'p_params_list','parser.py',147),
  ('params_list -> params_list COMMA parameter_declaration','params_list',3,'p_params_list','parser.py',148),
  ('parameter_declaration -> type_info identifier','parameter_declaration',2,'p_parameter_declaration','parser.py',157),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parser.py',161),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parser.py',162),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',174),
  ('expression -> func_call','expression',1,'p_expression','parser.py',175),
  ('expression -> atom','expression',1,'p_expression','parser.py',176),
  ('simple_expression -> binary_op','simple_expression',1,'p_simple_expression','parser.py',181),
  ('simple_expression -> unary_op','simple_expression',1,'p_simple_expression','parser.py',182),
  ('atom -> identifier','atom',1,'p_atom_expression_','parser.py',188),
  ('atom -> value','atom',1,'p_atom_expression_','parser.py',189),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',194),
  ('value -> NUMBER','value',1,'p_value','parser.py',198),
  ('value -> SLITERAL','value',1,'p_value','parser.py',199),
  ('value -> FLOATNUMBER','value',1,'p_value','parser.py',200),
  ('value -> TRUE','value',1,'p_value','parser.py',201),
  ('value -> FALSE','value',1,'p_value','parser.py',202),
  ('binary_op -> expression AND expression','binary_op',3,'p_binary_op_and','parser.py',208),
  ('binary_op -> expression OR expression','binary_op',3,'p_binary_op_or','parser.py',212),
  ('binary_op -> expression GT expression','binary_op',3,'p_binary_op_gt','parser.py',216),
  ('binary_op -> expression LT expression','binary_op',3,'p_binary_op_lt','parser.py',220),
  ('binary_op -> expression GE expression','binary_op',3,'p_binary_op_ge','parser.py',224),
  ('binary_op -> expression LE expression','binary_op',3,'p_binary_op_le','parser.py',228),
  ('binary_op -> expression ISEQUALS expression','binary_op',3,'p_binary_op_equals','parser.py',232),
  ('binary_op -> expression MODULO expression','binary_op',3,'p_binary_op_mod','parser.py',238),
  ('binary_op -> expression PLUS expression','binary_op',3,'p_binary_op_plus','parser.py',242),
  ('binary_op -> expression MINUS expression','binary_op',3,'p_binary_op_minus','parser.py',246),
  ('binary_op -> expression TIMES expression','binary_op',3,'p_binary_op_times','parser.py',250),
  ('binary_op -> expression DIVIDE expression','binary_op',3,'p_binary_op_divide','parser.py',254),
  ('unary_op -> MINUS expression','unary_op',2,'p_unary_op_minus','parser.py',260),
  ('unary_op -> NOT expression','unary_op',2,'p_unary_op_not','parser.py',268),
  ('type_info -> INT','type_info',1,'p_type_info','parser.py',272),
  ('type_info -> STRING','type_info',1,'p_type_info','parser.py',273),
  ('type_info -> REAL','type_info',1,'p_type_info','parser.py',274),
  ('type_info -> BOOLEAN','type_info',1,'p_type_info','parser.py',275),
  ('type_info -> CHAR','type_info',1,'p_type_info','parser.py',276),
]
